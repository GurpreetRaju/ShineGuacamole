@using Microsoft.AspNetCore.Components.Authorization
@using ShineGuacamole.Client.Shared
@using ShineGuacamole.Shared.Models

<CascadingAuthenticationState>
    <PageTitle>@AppBarContentProvider.PageTitle</PageTitle>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5">@ApplicationName</MudText>
        <MudText Class="ml-3">@AppBarContentProvider.PageTitle</MudText>
        <MudSpacer />
        @RenderActions(AppBarContentProvider.Actions)
        <LoginDisplay></LoginDisplay>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" OpenMiniOnHover="true" Variant="DrawerVariant.Mini" Elevation="2" 
               ClipMode="DrawerClipMode.Always" Fixed="true">
        <MudNavMenu>
            @foreach (var action in _navItems)
            {
                <MudNavLink Href="@action.Href" Icon="@action.Icon" Match="action.Match">@action.Text</MudNavLink>
            }
        </MudNavMenu>
    </MudDrawer>
</CascadingAuthenticationState>

@code {

    /// <summary>
    /// Renders the actions.
    /// </summary>
    /// <param name="actions">Actions to render.</param>
    /// <returns></returns>
    private RenderFragment RenderActions(IEnumerable<ActionConfig> actions) => __builder =>
    {
        @if (actions?.Any() == true)
        {
            @foreach (var action in actions)
            {
                @if (string.IsNullOrEmpty(action.Href))
                {
                    <MudIconButton OnClick="action.OnClick" Icon="@action.Icon" Color="Color.Inherit" title="@action.Text"></MudIconButton>
                }
                else
                {
                    <MudIconButton Href="@action.Href" Icon="@action.Icon" Color="Color.Inherit" title="@action.Text"></MudIconButton>
                }
            }
        }
    };

}
