
<CascadingValue Value="this">
    <PageTitle>@_pageTitle</PageTitle>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5">@ApplicationName</MudText>
        <MudText Class="ml-3">@_pageTitle</MudText>
        <MudSpacer />
        @RenderActions(_appBarActions)
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" OpenMiniOnHover="true" Variant="DrawerVariant.Mini"
               ClipMode="DrawerClipMode.Docked" Elevation="2">
        <MudNavMenu>
            @foreach (var action in _navs)
            {
                <MudNavLink Href="@action.Href" Icon="@action.Icon" Match="action.Match">@action.Text</MudNavLink>
            }
        </MudNavMenu>
    </MudDrawer>
    @ChildContent
</CascadingValue>

@code {
    private bool _drawerOpen;
    private string _pageTitle;

    private static IEnumerable<ActionConfig> _navs = [
        new ActionConfig{ Href = "/", Icon = Icons.Material.Filled.Home, Text = "Home", Match = NavLinkMatch.All },
        new ActionConfig{ Href = AppRoutes.Connections, Icon = Icons.Material.Filled.Apps, Text = "Connections", Match = NavLinkMatch.Prefix }
    ];


    /// <summary>
    /// App Bar content.
    /// </summary>
    private IEnumerable<ActionConfig> _appBarActions;

    /// <summary>
    /// Child content.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent{ get; set; }

    /// <summary>
    /// The app name.
    /// </summary>
    [Parameter]
    public string ApplicationName { get; set; }

    /// <summary>
    /// The current page title.
    /// </summary>
    public string Title => _pageTitle;

    /// <summary>
    /// Sets a page title.
    /// </summary>
    /// <param name="title"></param>
    public void SetPageTitle(string title)
    {
        _pageTitle = title;

        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Sets app bar actions.
    /// </summary>
    /// <param name="actions"></param>
    public void SetActions(IEnumerable<ActionConfig> actions)
    {
        _appBarActions = actions;

        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Toggle drawer.
    /// </summary>
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    /// <summary>
    /// Renders the actions.
    /// </summary>
    /// <param name="actions">Actions to render.</param>
    /// <returns></returns>
    private RenderFragment RenderActions(IEnumerable<ActionConfig> actions) => __builder =>
    {
        @if (actions?.Any() == true)
        {
            @foreach (var action in actions)
            {
                @if (string.IsNullOrEmpty(action.Href))
                {
                    <MudIconButton OnClick="action.OnClick" Icon="@action.Icon" Color="Color.Inherit" title="@action.Text"></MudIconButton>
                }
                else
                {
                    <MudIconButton Href="@action.Href" Icon="@action.Icon" Color="Color.Inherit" title="@action.Text"></MudIconButton>
                }
            }
        }
    };
}
